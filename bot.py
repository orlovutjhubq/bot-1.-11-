import json
import logging
import asyncio
from telethon import TelegramClient, events, Button
from dotenv import load_dotenv
import os
import re

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()
API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
BOT_TOKEN = os.getenv("BOT_TOKEN")
USER_PHONE = os.getenv("USER_PHONE")

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "bot_data.json"
monitoring_task = None  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –ö–ª–∏–µ–Ω—Ç—ã: –±–æ—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
bot = TelegramClient("bot", API_ID, API_HASH).start(bot_token=BOT_TOKEN)
user = TelegramClient("user", API_ID, API_HASH)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    if not os.path.exists(DATA_FILE):
        return {"keywords": [], "groups": [], "processed_messages": {}, "recipients": []}
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    return [
        [Button.inline("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ", b"add_keyword")],
        [Button.inline("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", b"add_group")],
        [Button.inline("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è", b"add_recipient")],
        [Button.inline("üìú –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", b"show_keywords")],
        [Button.inline("üìú –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—ã", b"show_groups")],
        [Button.inline("üìú –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π", b"show_recipients")],
        [Button.inline("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", b"start_monitoring")],
        [Button.inline("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", b"stop_monitoring")]
    ]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
@bot.on(events.NewMessage(pattern="/start"))
async def start(event):
    await event.respond("üëã –ü—Ä–∏–≤–µ—Ç! –£–ø—Ä–∞–≤–ª—è–π –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:", buttons=main_menu())

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
@bot.on(events.CallbackQuery(data=b"add_keyword"))
async def add_keyword(event):
    async with bot.conversation(event.sender_id) as conv:
        await conv.send_message("‚úçÔ∏è –í–≤–µ–¥–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ:")
        response = await conv.get_response()

        data = load_data()
        data["keywords"].append(response.text.lower())
        save_data(data)

        await conv.send_message(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {response.text}", buttons=main_menu())

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
@bot.on(events.CallbackQuery(data=b"add_group"))
async def add_group(event):
    async with bot.conversation(event.sender_id) as conv:
        await conv.send_message("‚úçÔ∏è –í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É (–ø—Ä–∏–º–µ—Ä: https://t.me/example_group):")
        response = await conv.get_response()

        match = re.search(r"https?://t\.me/(\w+)", response.text)
        if not match:
            await conv.send_message("üö´ –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.", buttons=main_menu())
            return

        group_link = response.text.strip()
        data = load_data()
        data["groups"].append({"link": group_link})
        save_data(data)
        await conv.send_message(f"‚úÖ –ì—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {group_link}", buttons=main_menu())

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.on(events.CallbackQuery(data=b"add_recipient"))
async def add_recipient(event):
    user_id = event.sender_id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = load_data()
    
    # ‚úÖ –ï—Å–ª–∏ –∫–ª—é—á–∞ "recipients" –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
    if "recipients" not in data:
        data["recipients"] = []
    
    if user_id not in data["recipients"]:
        data["recipients"].append(user_id)
        save_data(data)
        await event.respond("‚úÖ –¢—ã –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π!", buttons=main_menu())
    else:
        await event.respond("‚ö†Ô∏è –¢—ã —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π!", buttons=main_menu())


# –ü–æ–∫–∞–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
@bot.on(events.CallbackQuery(data=b"show_keywords"))
async def show_keywords(event):
    data = load_data()
    keywords = "\n".join(data["keywords"]) if data["keywords"] else "‚ùå –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –∑–∞–¥–∞–Ω—ã."
    await event.respond(f"üìú –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:\n{keywords}", buttons=main_menu())

# –ü–æ–∫–∞–∑ –≥—Ä—É–ø–ø
@bot.on(events.CallbackQuery(data=b"show_groups"))
async def show_groups(event):
    data = load_data()
    groups = "\n".join([g["link"] for g in data["groups"]]) if data["groups"] else "‚ùå –ì—Ä—É–ø–ø—ã –Ω–µ –∑–∞–¥–∞–Ω—ã."
    await event.respond(f"üìú –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä—É–ø–ø:\n{groups}", buttons=main_menu())

# –ü–æ–∫–∞–∑ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
@bot.on(events.CallbackQuery(data=b"show_recipients"))
async def show_recipients(event):
    data = load_data()
    recipients = "\n".join(map(str, data["recipients"])) if data["recipients"] else "‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã."
    await event.respond(f"üìú –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:\n{recipients}", buttons=main_menu())

# –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
@bot.on(events.CallbackQuery(data=b"start_monitoring"))
async def start_monitoring(event):
    global monitoring_task
    if monitoring_task and not monitoring_task.done():
        await event.respond("üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!", buttons=main_menu())
        return

    await event.respond("üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω! –ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.")
    monitoring_task = asyncio.create_task(monitor_chats())

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
@bot.on(events.CallbackQuery(data=b"stop_monitoring"))
async def stop_monitoring(event):
    global monitoring_task
    if monitoring_task:
        monitoring_task.cancel()
        monitoring_task = None
        await event.respond("‚èπ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", buttons=main_menu())
    else:
        await event.respond("üö´ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω.", buttons=main_menu())

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π
async def monitor_chats():
    data = load_data()
    group_links = [g["link"] for g in data["groups"]]
    keywords = data["keywords"]
    recipients = data.get("recipients", [])  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π

    logging.info(f"üîç –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords}")

    async with user:
        while True:
            for group_link in group_links:
                try:
                    chat = await user.get_entity(group_link)
                    messages = await user.get_messages(chat, limit=10)

                    logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –≥—Ä—É–ø–ø—É: {group_link}")

                    for message in messages:
                        if not message.text:
                            continue

                        message_text = message.text.lower()
                        sender_id = message.sender_id  # üÜî ID –∞–≤—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

                        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞–≤—Ç–æ—Ä–∞ (–µ—Å–ª–∏ ID –ø—É–±–ª–∏—á–Ω—ã–π)
                        sender_link = f"https://t.me/{sender_id}" if sender_id else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

                        for keyword in keywords:
                            if keyword in message_text:
                                logging.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ '{keyword}' –≤ {group_link}!")

                                msg = (
                                    f"üîç **–ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ!**\n"
                                    f"üì¢ **–ì—Ä—É–ø–ø–∞:** {group_link}\n"
                                    f"üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ:**\n{message.text}\n"
                                    f"üë§ **–ê–≤—Ç–æ—Ä:** [{sender_id}]({sender_link})"
                                )

                                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º
                                for recipient in recipients:
                                    try:
                                        await bot.send_message(recipient, msg, link_preview=False)
                                        logging.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {recipient}!")
                                    except Exception as e:
                                        logging.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {recipient}: {e}")

                    await asyncio.sleep(10)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏

                except Exception as e:
                    logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ {group_link}: {e}")

            await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await bot.start()
    await user.start(phone=USER_PHONE)
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await bot.run_until_disconnected()

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())